//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.15

use super::sea_orm_active_enums::StandStats;
use async_graphql::SimpleObject;
use sea_orm::entity::prelude::*;
use sqlx::Error;
use sqlx::FromRow;
use sqlx::Row;
use sqlx::mysql::MySqlRow;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, SimpleObject, Default)]
#[sea_orm(table_name = "stand")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub owner: String,
    pub destructive_power: Option<StandStats>,
    pub speed: Option<StandStats>,
    pub range: Option<StandStats>,
    pub persistance: Option<StandStats>,
    pub precision: Option<StandStats>,
    pub development_potential: Option<StandStats>,
}

pub fn str_to_optional_stand_stat(s: &str) -> Option<StandStats> {
    match s {
        "A" => Some(StandStats::A),
        "B" => Some(StandStats::B),
        "C" => Some(StandStats::C),
        "D" => Some(StandStats::D),
        "E" => Some(StandStats::E),
        "Null" => Some(StandStats::Null),
        _ => None,
    }
}

impl<'r> FromRow<'r, MySqlRow> for Model {
    fn from_row(row: &'r MySqlRow) -> Result<Self, Error> {
        if row.is_empty() {
            return Err(Error::RowNotFound);
        }

        let mut m: Model = Default::default();
        m.id = row.get("id");
        m.name = row.get("name");
        m.owner = row.get("owner");
        m.destructive_power =
            str_to_optional_stand_stat(row.get::<&str, &str>("destructive_power"));
        m.speed = str_to_optional_stand_stat(row.get::<&str, &str>("speed"));
        m.range = str_to_optional_stand_stat(row.get::<&str, &str>("range"));
        m.persistance = str_to_optional_stand_stat(row.get::<&str, &str>("persistance"));
        m.precision = str_to_optional_stand_stat(row.get::<&str, &str>("precision"));
        m.development_potential =
            str_to_optional_stand_stat(row.get::<&str, &str>("development_potential"));

        Ok(m)
    }
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {}
